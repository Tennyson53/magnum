description: 'This is a nested stack that defines a single Kubernetes node, This stack
  is included by an AutoScalingGroup resource in the parent template (kubecluster.yaml).

  '
heat_template_version: 2014-10-16
outputs:
  kube_node_external_ip:
    value:
      get_attr: [kube_node_floating, floating_ip_address]
  kube_node_ip:
    value:
      get_attr: [kube_node_eth0, fixed_ips, 0, ip_address]
parameters:
  docker_volume_size: {default: 5, description: 'size of a cinder volume to allocate
      to docker for container/image storage

      ', type: number}
  external_network: {default: public, description: uuid/name of a network to use for
      floating ip addresses, type: string}
  fixed_network: {default: 017ecaaf-3df5-4fb5-991d-6a95a400875b, description: Network
      from which to allocate fixed addresses. Need to be UPDATE by USER, type: string}
  fixed_subnet: {default: 6e2e92e1-918e-4004-817a-2103eb51ea1a, description: Subnet
      from which to allocate fixed addresses. Need to be UPDATE by USER, type: string}
  kube_allow_priv:
    constraints:
    - allowed_values: ['true', 'false']
    default: 'false'
    description: 'whether or not kubernetes should permit privileged containers.

      '
    type: string
  kube_master_ip: {default: 10.0.0.3, description: IP address of the Kubernetes master
      server. Need to be UPDATE by USER, type: string}
  node_flavor: {default: m1.small, description: flavor to use when booting the server,
    type: string}
  rhn_password: {default: '', description: 'password to use for authenticating with
      RHN

      ', type: string}
  rhn_register_host:
    constraints:
    - allowed_values: ['true', 'false']
    default: 'false'
    description: 'whether or not to try registering with RHN

      '
    type: string
  rhn_username: {default: '', description: 'username to use for authenticating with
      RHN

      ', type: string}
  server_image: {description: glance image used to boot the server, type: string}
  ssh_key_name: {default: lars, description: name of ssh key to be provisioned on
      our server, type: string}
  wait_condition_timeout: {default: 6000, description: 'timeout for the Wait Conditions

      ', type: number}
resources:
  atomic_upgrade:
    properties:
      config: {get_file: fragments/atomic-upgrade.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  cadvisor_service:
    properties:
      config: {get_file: fragments/cadvisor.service.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  configure_docker_storage:
    properties:
      config: {get_file: fragments/configure-docker-storage.sh}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  configure_kubernetes_node:
    properties:
      config: {get_file: fragments/configure-kubernetes-node.sh}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  disable_selinux:
    properties:
      config: {get_file: fragments/disable-selinux.sh}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  docker_service:
    properties:
      config: {get_file: fragments/docker.service.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  docker_volume:
    properties:
      size: {get_param: docker_volume_size}
    type: OS::Cinder::Volume
  docker_volume_attach:
    properties:
      instance_uuid: {get_resource: kube_node}
      volume_id: {get_resource: docker_volume}
    type: OS::Cinder::VolumeAttachment
  enable_services:
    properties:
      config: {get_file: fragments/enable-services-node.sh}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  kube_examples:
    properties:
      config: {get_file: fragments/kube-examples.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  kube_node:
    properties:
      flavor: {get_param: node_flavor}
      image: {get_param: server_image}
      key_name: {get_param: ssh_key_name}
      networks:
      - port: {get_resource: kube_node_eth0}
      user_data: {get_resource: kube_node_init}
      user_data_format: RAW
    type: OS::Nova::Server
  kube_node_eth0:
    properties:
      fixed_ips:
      - subnet: {get_param: fixed_subnet}
      network: {get_param: fixed_network}
      replacement_policy: AUTO
      security_groups:
      - {get_resource: secgroup_all_open}
    type: OS::Neutron::Port
  kube_node_floating:
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: kube_node_eth0}
    type: OS::Neutron::FloatingIP
  kube_node_init:
    properties:
      parts:
      - config: {get_resource: disable_selinux}
      - config: {get_resource: rhn_register}
      - config: {get_resource: atomic_upgrade}
      - config: {get_resource: write_heat_params}
      - config: {get_resource: kube_user}
      - config: {get_resource: kube_examples}
      - config: {get_resource: configure_docker_storage}
      - config: {get_resource: kube_register}
      - config: {get_resource: configure_kubernetes_node}
      - config: {get_resource: docker_service}
      - config: {get_resource: cadvisor_service}
      - config: {get_resource: enable_services}
      - config: {get_resource: node_wc_notify}
    type: OS::Heat::MultipartMime
  kube_register:
    properties:
      config: {get_file: fragments/kube-register.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  kube_user:
    properties:
      config: {get_file: fragments/kube-user.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  node_wait_condition:
    depends_on: kube_node
    properties:
      handle: {get_resource: node_wait_handle}
      timeout: {get_param: wait_condition_timeout}
    type: OS::Heat::WaitCondition
  node_wait_handle: {type: 'OS::Heat::WaitConditionHandle'}
  node_wc_notify:
    properties:
      config:
        str_replace:
          params:
            wc_notify:
              get_attr: [node_wait_handle, curl_cli]
          template: '#!/bin/bash -v

            wc_notify --data-binary ''{"status": "SUCCESS"}''

            '
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  rhn_register:
    properties:
      config:
        str_replace:
          params:
            $RHN_PASSWORD: {get_param: rhn_password}
            $RHN_REGISTER_HOST: {get_param: rhn_register_host}
            $RHN_USERNAME: {get_param: rhn_username}
          template: {get_file: fragments/rhn-register.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
  secgroup_all_open:
    properties:
      rules:
      - {protocol: icmp}
      - {protocol: tcp}
      - {protocol: udp}
    type: OS::Neutron::SecurityGroup
  write_heat_params:
    properties:
      config:
        str_replace:
          params:
            $DOCKER_VOLUME: {get_resource: docker_volume}
            $KUBE_ALLOW_PRIV: {get_param: kube_allow_priv}
            $KUBE_MASTER_IP: {get_param: kube_master_ip}
          template: {get_file: fragments/write-heat-params.yaml}
      group: ungrouped
    type: OS::Heat::SoftwareConfig
